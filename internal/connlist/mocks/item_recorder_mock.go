// Code generated by MockGen. DO NOT EDIT.
// Source: item_recorder.go
//
// Generated by this command:
//
//	mockgen -destination=mocks/item_recorder_mock.go -source=item_recorder.go -package=mocks -typed
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockNetworkRecorder is a mock of NetworkRecorder interface.
type MockNetworkRecorder struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkRecorderMockRecorder
	isgomock struct{}
}

// MockNetworkRecorderMockRecorder is the mock recorder for MockNetworkRecorder.
type MockNetworkRecorderMockRecorder struct {
	mock *MockNetworkRecorder
}

// NewMockNetworkRecorder creates a new mock instance.
func NewMockNetworkRecorder(ctrl *gomock.Controller) *MockNetworkRecorder {
	mock := &MockNetworkRecorder{ctrl: ctrl}
	mock.recorder = &MockNetworkRecorderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetworkRecorder) EXPECT() *MockNetworkRecorderMockRecorder {
	return m.recorder
}

// BytesRead mocks base method.
func (m *MockNetworkRecorder) BytesRead() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BytesRead")
	ret0, _ := ret[0].(int)
	return ret0
}

// BytesRead indicates an expected call of BytesRead.
func (mr *MockNetworkRecorderMockRecorder) BytesRead() *MockNetworkRecorderBytesReadCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BytesRead", reflect.TypeOf((*MockNetworkRecorder)(nil).BytesRead))
	return &MockNetworkRecorderBytesReadCall{Call: call}
}

// MockNetworkRecorderBytesReadCall wrap *gomock.Call
type MockNetworkRecorderBytesReadCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkRecorderBytesReadCall) Return(arg0 int) *MockNetworkRecorderBytesReadCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkRecorderBytesReadCall) Do(f func() int) *MockNetworkRecorderBytesReadCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkRecorderBytesReadCall) DoAndReturn(f func() int) *MockNetworkRecorderBytesReadCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// BytesWritten mocks base method.
func (m *MockNetworkRecorder) BytesWritten() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BytesWritten")
	ret0, _ := ret[0].(int)
	return ret0
}

// BytesWritten indicates an expected call of BytesWritten.
func (mr *MockNetworkRecorderMockRecorder) BytesWritten() *MockNetworkRecorderBytesWrittenCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BytesWritten", reflect.TypeOf((*MockNetworkRecorder)(nil).BytesWritten))
	return &MockNetworkRecorderBytesWrittenCall{Call: call}
}

// MockNetworkRecorderBytesWrittenCall wrap *gomock.Call
type MockNetworkRecorderBytesWrittenCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkRecorderBytesWrittenCall) Return(arg0 int) *MockNetworkRecorderBytesWrittenCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkRecorderBytesWrittenCall) Do(f func() int) *MockNetworkRecorderBytesWrittenCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkRecorderBytesWrittenCall) DoAndReturn(f func() int) *MockNetworkRecorderBytesWrittenCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Read mocks base method.
func (m *MockNetworkRecorder) Read() []float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read")
	ret0, _ := ret[0].([]float64)
	return ret0
}

// Read indicates an expected call of Read.
func (mr *MockNetworkRecorderMockRecorder) Read() *MockNetworkRecorderReadCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockNetworkRecorder)(nil).Read))
	return &MockNetworkRecorderReadCall{Call: call}
}

// MockNetworkRecorderReadCall wrap *gomock.Call
type MockNetworkRecorderReadCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkRecorderReadCall) Return(arg0 []float64) *MockNetworkRecorderReadCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkRecorderReadCall) Do(f func() []float64) *MockNetworkRecorderReadCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkRecorderReadCall) DoAndReturn(f func() []float64) *MockNetworkRecorderReadCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RecordInterval mocks base method.
func (m *MockNetworkRecorder) RecordInterval() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordInterval")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// RecordInterval indicates an expected call of RecordInterval.
func (mr *MockNetworkRecorderMockRecorder) RecordInterval() *MockNetworkRecorderRecordIntervalCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordInterval", reflect.TypeOf((*MockNetworkRecorder)(nil).RecordInterval))
	return &MockNetworkRecorderRecordIntervalCall{Call: call}
}

// MockNetworkRecorderRecordIntervalCall wrap *gomock.Call
type MockNetworkRecorderRecordIntervalCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkRecorderRecordIntervalCall) Return(arg0 time.Duration) *MockNetworkRecorderRecordIntervalCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkRecorderRecordIntervalCall) Do(f func() time.Duration) *MockNetworkRecorderRecordIntervalCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkRecorderRecordIntervalCall) DoAndReturn(f func() time.Duration) *MockNetworkRecorderRecordIntervalCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Start mocks base method.
func (m *MockNetworkRecorder) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start.
func (mr *MockNetworkRecorderMockRecorder) Start() *MockNetworkRecorderStartCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockNetworkRecorder)(nil).Start))
	return &MockNetworkRecorderStartCall{Call: call}
}

// MockNetworkRecorderStartCall wrap *gomock.Call
type MockNetworkRecorderStartCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkRecorderStartCall) Return() *MockNetworkRecorderStartCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkRecorderStartCall) Do(f func()) *MockNetworkRecorderStartCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkRecorderStartCall) DoAndReturn(f func()) *MockNetworkRecorderStartCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Written mocks base method.
func (m *MockNetworkRecorder) Written() []float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Written")
	ret0, _ := ret[0].([]float64)
	return ret0
}

// Written indicates an expected call of Written.
func (mr *MockNetworkRecorderMockRecorder) Written() *MockNetworkRecorderWrittenCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Written", reflect.TypeOf((*MockNetworkRecorder)(nil).Written))
	return &MockNetworkRecorderWrittenCall{Call: call}
}

// MockNetworkRecorderWrittenCall wrap *gomock.Call
type MockNetworkRecorderWrittenCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkRecorderWrittenCall) Return(arg0 []float64) *MockNetworkRecorderWrittenCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkRecorderWrittenCall) Do(f func() []float64) *MockNetworkRecorderWrittenCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkRecorderWrittenCall) DoAndReturn(f func() []float64) *MockNetworkRecorderWrittenCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
