// Code generated by MockGen. DO NOT EDIT.
// Source: recorder.go
//
// Generated by this command:
//
//	mockgen -destination=mocks/recorder_mocks.go -source=recorder.go -package=mocks -typed
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockSource is a mock of Source interface.
type MockSource struct {
	ctrl     *gomock.Controller
	recorder *MockSourceMockRecorder
	isgomock struct{}
}

// MockSourceMockRecorder is the mock recorder for MockSource.
type MockSourceMockRecorder struct {
	mock *MockSource
}

// NewMockSource creates a new mock instance.
func NewMockSource(ctrl *gomock.Controller) *MockSource {
	mock := &MockSource{ctrl: ctrl}
	mock.recorder = &MockSourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSource) EXPECT() *MockSourceMockRecorder {
	return m.recorder
}

// BytesRead mocks base method.
func (m *MockSource) BytesRead() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BytesRead")
	ret0, _ := ret[0].(int)
	return ret0
}

// BytesRead indicates an expected call of BytesRead.
func (mr *MockSourceMockRecorder) BytesRead() *MockSourceBytesReadCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BytesRead", reflect.TypeOf((*MockSource)(nil).BytesRead))
	return &MockSourceBytesReadCall{Call: call}
}

// MockSourceBytesReadCall wrap *gomock.Call
type MockSourceBytesReadCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSourceBytesReadCall) Return(arg0 int) *MockSourceBytesReadCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSourceBytesReadCall) Do(f func() int) *MockSourceBytesReadCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSourceBytesReadCall) DoAndReturn(f func() int) *MockSourceBytesReadCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// BytesWritten mocks base method.
func (m *MockSource) BytesWritten() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BytesWritten")
	ret0, _ := ret[0].(int)
	return ret0
}

// BytesWritten indicates an expected call of BytesWritten.
func (mr *MockSourceMockRecorder) BytesWritten() *MockSourceBytesWrittenCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BytesWritten", reflect.TypeOf((*MockSource)(nil).BytesWritten))
	return &MockSourceBytesWrittenCall{Call: call}
}

// MockSourceBytesWrittenCall wrap *gomock.Call
type MockSourceBytesWrittenCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSourceBytesWrittenCall) Return(arg0 int) *MockSourceBytesWrittenCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSourceBytesWrittenCall) Do(f func() int) *MockSourceBytesWrittenCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSourceBytesWrittenCall) DoAndReturn(f func() int) *MockSourceBytesWrittenCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
